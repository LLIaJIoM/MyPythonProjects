import time
import json
import os
import asyncio
from news_parser import get_latest_news, get_combined_news
from joke_generator import make_joke, make_joke_alternative
from telegram_sender import send_message, test_telegram_connection

CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
PROCESSED_FILE = "processed_news.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
if os.path.exists(PROCESSED_FILE):
    with open(PROCESSED_FILE, "r", encoding="utf-8") as f:
        processed_news = set(json.load(f))
else:
    processed_news = set()

def save_processed_news():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª"""
    with open(PROCESSED_FILE, "w", encoding="utf-8") as f:
        json.dump(list(processed_news), f, ensure_ascii=False)

def format_news_message(news, joke):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é –∏ —à—É—Ç–∫–æ–π"""
    source = news.get('source', '–ù–æ–≤–æ—Å—Ç–∏')
    
    message = f"""üì∞ <b>{news['title']}</b>

üé≠ <b>–Æ–ú–û–†:</b>
{joke}

üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}
üîó <a href="{news['link']}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>

#–Ω–æ–≤–æ—Å—Ç–∏ #—é–º–æ—Ä #—Å–∞—Ç–∏—Ä–∞"""
    
    return message

async def process_news():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à—É—Ç–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        news_list = get_combined_news()
        
        if not news_list:
            print("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for news in news_list:
            news_id = news['link']
            
            if news_id not in processed_news:
                print(f"üì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç—å: {news['title'][:50]}...")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É—Ç–∫—É
                try:
                    joke = make_joke(f"{news['title']} {news['summary']}")
                    
                    # –ï—Å–ª–∏ —à—É—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
                    if len(joke) < 20:
                        joke = make_joke_alternative(f"{news['title']} {news['summary']}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = format_news_message(news, joke)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    success = await send_message(message)
                    
                    if success:
                        processed_news.add(news_id)
                        save_processed_news()
                        print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {news['title'][:30]}...")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {news['title'][:30]}...")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                    await asyncio.sleep(10)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                    continue
            else:
                print(f"‚è≠Ô∏è –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {news['title'][:30]}...")
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    print("ü§ñ –ë–æ—Ç —Å —à—É—Ç–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    if not test_telegram_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à—É—Ç–∫–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à—É—Ç–∫–∏...")
    try:
        test_joke = make_joke("–í –ú–æ—Å–∫–≤–µ –ø—Ä–æ—à—ë–ª –¥–æ–∂–¥—å.")
        print(f"‚úÖ –¢–µ—Å—Ç —à—É—Ç–∫–∏: {test_joke}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —à—É—Ç–∫–∏: {e}")
    
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("=" * 50)
    
    while True:
        try:
            await process_news()
            await asyncio.sleep(CHECK_INTERVAL)
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == "__main__":
    asyncio.run(main())